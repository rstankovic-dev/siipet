{% doc %}
  @prompt
    sticky tab section
    when click each 5 tab, scroll to section
    tab: title, text: section id, it should be same with tabs section, it should be show when section of first tab appear
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-sticky-tabs-{{ ai_gen_id }} {
    position: sticky;
    top: 0;
    z-index: 100;
    background-color: {{ block.settings.background_color | default: settings.background }};
    border-bottom: 1px solid {{ block.settings.border_color | default: 'rgba(var(--text-color), 0.1)' }};
    padding: {{ block.settings.vertical_padding }}px 0;
    backdrop-filter: blur(10px);
    transform: translateY(-100%);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .ai-sticky-tabs-{{ ai_gen_id }}.visible {
    transform: translateY(0);
    opacity: 1;
    visibility: visible;
  }

  .ai-sticky-tabs-container-{{ ai_gen_id }} {
    max-width: {{ settings.page_width }}px;
    margin: 0 auto;
    padding: 0 var(--section-outer-spacing-inline);
  }

  .ai-sticky-tabs-nav-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.tab_spacing }}px;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    scroll-behavior: smooth;
  }

  .ai-sticky-tabs-nav-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .ai-sticky-tabs-tab-{{ ai_gen_id }} {
    flex-shrink: 0;
    padding: {{ block.settings.tab_padding_vertical }}px {{ block.settings.tab_padding_horizontal }}px;
    background-color: {{ block.settings.tab_background | default: 'transparent' }};
    color: {{ block.settings.tab_text_color | default: settings.text_color }};
    border: {{ block.settings.tab_border_width }}px solid {{ block.settings.tab_border_color | default: 'rgba(var(--text-color), 0.2)' }};
    border-radius: {{ settings.button_border_radius }}px;
    text-decoration: none;
    font-family: {{ settings.heading_font.family }}, {{ settings.heading_font.fallback_families }};
    font-size: {{ block.settings.tab_font_size }}px;
    font-weight: {{ settings.heading_font.weight }};
    text-transform: {{ settings.heading_text_transform }};
    letter-spacing: {{ settings.heading_letter_spacing }}em;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
    position: relative;
    overflow: hidden;
  }

  .ai-sticky-tabs-tab-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.tab_hover_background | default: 'rgba(var(--text-color), 0.05)' }};
    color: {{ block.settings.tab_hover_text_color | default: settings.text_color }};
    border-color: {{ block.settings.tab_hover_border_color | default: 'rgba(var(--text-color), 0.3)' }};
    transform: translateY(-1px);
  }

  .ai-sticky-tabs-tab-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.tab_active_background | default: settings.primary_button_background }};
    color: {{ block.settings.tab_active_text_color | default: settings.primary_button_text_color }};
    border-color: {{ block.settings.tab_active_border_color | default: settings.primary_button_background }};
    transform: translateY(-1px);
  }

  .ai-sticky-tabs-tab-{{ ai_gen_id }}::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.1) 50%, transparent 70%);
    transform: translateX(-100%);
    transition: transform 0.6s ease;
  }

  .ai-sticky-tabs-tab-{{ ai_gen_id }}:hover::before {
    transform: translateX(100%);
  }

  @media screen and (max-width: 749px) {
    .ai-sticky-tabs-container-{{ ai_gen_id }} {
      padding: 0 var(--section-outer-spacing-inline);
    }
    
    .ai-sticky-tabs-nav-{{ ai_gen_id }} {
      gap: {{ block.settings.tab_spacing | times: 0.75 }}px;
    }
    
    .ai-sticky-tabs-tab-{{ ai_gen_id }} {
      font-size: {{ block.settings.tab_font_size | times: 0.9 }}px;
      padding: {{ block.settings.tab_padding_vertical | times: 0.8 }}px {{ block.settings.tab_padding_horizontal | times: 0.8 }}px;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .ai-sticky-tabs-{{ ai_gen_id }} {
      transition: none;
    }
    
    .ai-sticky-tabs-tab-{{ ai_gen_id }} {
      transition: none;
    }
    
    .ai-sticky-tabs-tab-{{ ai_gen_id }}::before {
      display: none;
    }
  }
{% endstyle %}

<sticky-tabs-{{ ai_gen_id }}
  class="ai-sticky-tabs-{{ ai_gen_id }}"
  data-scroll-offset="{{ block.settings.scroll_offset }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-sticky-tabs-container-{{ ai_gen_id }}">
    <nav class="ai-sticky-tabs-nav-{{ ai_gen_id }}" role="tablist">
      {% for i in (1..5) %}
        {% liquid
          assign tab_title_key = 'tab_' | append: i | append: '_title'
          assign tab_section_id_key = 'tab_' | append: i | append: '_section_id'
          
          assign tab_title = block.settings[tab_title_key]
          assign tab_section_id = block.settings[tab_section_id_key]
        %}
        
        {% if tab_title != blank and tab_section_id != blank %}
          <button
            class="ai-sticky-tabs-tab-{{ ai_gen_id }}"
            data-target="{{ tab_section_id }}"
            data-tab-index="{{ i }}"
            type="button"
            role="tab"
            aria-selected="false"
            aria-controls="{{ tab_section_id }}"
          >
            {{ tab_title }}
          </button>
        {% endif %}
      {% endfor %}
    </nav>
  </div>
</sticky-tabs-{{ ai_gen_id }}>

<script>
  (function() {
    class StickyTabs{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.tabs = [];
        this.sections = [];
        this.scrollOffset = parseInt(this.dataset.scrollOffset) || 0;
        this.isScrolling = false;
        this.observer = null;
        this.firstSectionObserver = null;
        this.firstSection = null;
        this.isVisible = false;
      }

      connectedCallback() {
        this.tabs = this.querySelectorAll('.ai-sticky-tabs-tab-{{ ai_gen_id }}');
        this.setupEventListeners();
        this.findSections();
        this.setupFirstSectionObserver();
        this.setupIntersectionObserver();
      }

      disconnectedCallback() {
        if (this.observer) {
          this.observer.disconnect();
        }
        if (this.firstSectionObserver) {
          this.firstSectionObserver.disconnect();
        }
      }

      setupEventListeners() {
        this.tabs.forEach(tab => {
          tab.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = tab.dataset.target;
            this.scrollToSection(targetId);
          });

          tab.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              const targetId = tab.dataset.target;
              this.scrollToSection(targetId);
            }
          });
        });

        window.addEventListener('scroll', this.throttle(() => {
          if (!this.isScrolling && this.isVisible) {
            this.updateActiveTab();
          }
        }, 100));
      }

      findSections() {
        this.sections = [];
        this.tabs.forEach(tab => {
          const targetId = tab.dataset.target;
          const section = document.getElementById(targetId);
          if (section) {
            this.sections.push({
              element: section,
              id: targetId,
              tab: tab,
              tabIndex: parseInt(tab.dataset.tabIndex)
            });
          }
        });

        this.sections.sort((a, b) => a.tabIndex - b.tabIndex);
        this.firstSection = this.sections.length > 0 ? this.sections[0].element : null;
      }

      setupFirstSectionObserver() {
        if (!this.firstSection || !window.IntersectionObserver) return;

        const options = {
          root: null,
          rootMargin: '0px 0px -50% 0px',
          threshold: 0
        };

        this.firstSectionObserver = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.target === this.firstSection) {
              if (entry.isIntersecting && !this.isVisible) {
                this.showTabs();
              } else if (!entry.isIntersecting && this.isVisible) {
                this.hideTabs();
              }
            }
          });
        }, options);

        this.firstSectionObserver.observe(this.firstSection);
      }

      setupIntersectionObserver() {
        if (!window.IntersectionObserver) return;

        const options = {
          root: null,
          rootMargin: `-${this.offsetHeight + this.scrollOffset}px 0px -50% 0px`,
          threshold: 0
        };

        this.observer = new IntersectionObserver((entries) => {
          if (this.isScrolling || !this.isVisible) return;

          entries.forEach(entry => {
            const section = this.sections.find(s => s.element === entry.target);
            if (section && entry.isIntersecting) {
              this.setActiveTab(section.tab);
            }
          });
        }, options);

        this.sections.forEach(section => {
          this.observer.observe(section.element);
        });
      }

      showTabs() {
        this.isVisible = true;
        this.classList.add('visible');
        this.updateActiveTab();
      }

      hideTabs() {
        this.isVisible = false;
        this.classList.remove('visible');
      }

      scrollToSection(targetId) {
        const targetSection = document.getElementById(targetId);
        if (targetSection) {
          this.isScrolling = true;
          
          const stickyHeight = this.offsetHeight;
          const targetPosition = targetSection.offsetTop - stickyHeight - this.scrollOffset;
          
          window.scrollTo({
            top: Math.max(0, targetPosition),
            behavior: 'smooth'
          });

          setTimeout(() => {
            this.isScrolling = false;
            if (this.isVisible) {
              this.updateActiveTab();
            }
          }, 1000);
        }
      }

      updateActiveTab() {
        if (this.sections.length === 0 || !this.isVisible) return;

        const scrollPosition = window.scrollY + this.offsetHeight + this.scrollOffset + 50;
        let activeSection = null;

        for (let i = this.sections.length - 1; i >= 0; i--) {
          const section = this.sections[i];
          if (section.element.offsetTop <= scrollPosition) {
            activeSection = section;
            break;
          }
        }

        if (activeSection) {
          this.setActiveTab(activeSection.tab);
        }
      }

      setActiveTab(activeTab) {
        this.tabs.forEach(tab => {
          tab.classList.remove('active');
          tab.setAttribute('aria-selected', 'false');
        });
        
        if (activeTab) {
          activeTab.classList.add('active');
          activeTab.setAttribute('aria-selected', 'true');
          this.scrollTabIntoView(activeTab);
        }
      }

      scrollTabIntoView(tab) {
        const nav = this.querySelector('.ai-sticky-tabs-nav-{{ ai_gen_id }}');
        const tabRect = tab.getBoundingClientRect();
        const navRect = nav.getBoundingClientRect();

        if (tabRect.left < navRect.left) {
          nav.scrollLeft -= navRect.left - tabRect.left + 20;
        } else if (tabRect.right > navRect.right) {
          nav.scrollLeft += tabRect.right - navRect.right + 20;
        }
      }

      throttle(func, limit) {
        let inThrottle;
        return function() {
          const args = arguments;
          const context = this;
          if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
          }
        }
      }
    }

    customElements.define('sticky-tabs-{{ ai_gen_id }}', StickyTabs{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Sticky tab navigation",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Tab 1"
    },
    {
      "type": "text",
      "id": "tab_1_title",
      "label": "Title",
      "default": "Overview"
    },
    {
      "type": "text",
      "id": "tab_1_section_id",
      "label": "Section ID",
      "info": "Enter the ID of the section to scroll to (without #)",
      "default": "section-overview"
    },
    {
      "type": "header",
      "content": "Tab 2"
    },
    {
      "type": "text",
      "id": "tab_2_title",
      "label": "Title",
      "default": "Features"
    },
    {
      "type": "text",
      "id": "tab_2_section_id",
      "label": "Section ID",
      "info": "Enter the ID of the section to scroll to (without #)",
      "default": "section-features"
    },
    {
      "type": "header",
      "content": "Tab 3"
    },
    {
      "type": "text",
      "id": "tab_3_title",
      "label": "Title",
      "default": "Specifications"
    },
    {
      "type": "text",
      "id": "tab_3_section_id",
      "label": "Section ID",
      "info": "Enter the ID of the section to scroll to (without #)",
      "default": "section-specs"
    },
    {
      "type": "header",
      "content": "Tab 4"
    },
    {
      "type": "text",
      "id": "tab_4_title",
      "label": "Title",
      "default": "Reviews"
    },
    {
      "type": "text",
      "id": "tab_4_section_id",
      "label": "Section ID",
      "info": "Enter the ID of the section to scroll to (without #)",
      "default": "section-reviews"
    },
    {
      "type": "header",
      "content": "Tab 5"
    },
    {
      "type": "text",
      "id": "tab_5_title",
      "label": "Title",
      "default": "FAQ"
    },
    {
      "type": "text",
      "id": "tab_5_section_id",
      "label": "Section ID",
      "info": "Enter the ID of the section to scroll to (without #)",
      "default": "section-faq"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border"
    },
    {
      "type": "color",
      "id": "tab_background",
      "label": "Tab background"
    },
    {
      "type": "color",
      "id": "tab_text_color",
      "label": "Tab text"
    },
    {
      "type": "color",
      "id": "tab_border_color",
      "label": "Tab border"
    },
    {
      "type": "color",
      "id": "tab_hover_background",
      "label": "Tab hover background"
    },
    {
      "type": "color",
      "id": "tab_hover_text_color",
      "label": "Tab hover text"
    },
    {
      "type": "color",
      "id": "tab_hover_border_color",
      "label": "Tab hover border"
    },
    {
      "type": "color",
      "id": "tab_active_background",
      "label": "Active tab background"
    },
    {
      "type": "color",
      "id": "tab_active_text_color",
      "label": "Active tab text"
    },
    {
      "type": "color",
      "id": "tab_active_border_color",
      "label": "Active tab border"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "vertical_padding",
      "min": 8,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Vertical padding",
      "default": 16
    },
    {
      "type": "range",
      "id": "tab_spacing",
      "min": 8,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Tab spacing",
      "default": 16
    },
    {
      "type": "range",
      "id": "tab_font_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Tab font size",
      "default": 14
    },
    {
      "type": "range",
      "id": "tab_padding_vertical",
      "min": 6,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Tab vertical padding",
      "default": 12
    },
    {
      "type": "range",
      "id": "tab_padding_horizontal",
      "min": 12,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Tab horizontal padding",
      "default": 20
    },
    {
      "type": "range",
      "id": "tab_border_width",
      "min": 0,
      "max": 4,
      "step": 1,
      "unit": "px",
      "label": "Tab border width",
      "default": 1
    },
    {
      "type": "range",
      "id": "scroll_offset",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Scroll offset",
      "info": "Additional space above the target section when scrolling",
      "default": 20
    }
  ],
  "presets": [
    {
      "name": "Sticky tab navigation"
    }
  ]
}
{% endschema %}